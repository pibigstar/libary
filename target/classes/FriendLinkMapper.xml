<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lei.dao.FriendLinkMapper" >
  <resultMap id="BaseResultMap" type="com.lei.entity.FriendLink" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="link_name" property="linkName" jdbcType="VARCHAR" />
    <result column="link_url" property="linkUrl" jdbcType="VARCHAR" />
    <result column="link_email" property="linkEmail" jdbcType="VARCHAR" />
    <result column="show_location" property="showLocation" jdbcType="VARCHAR" />
    <result column="sort" property="sort" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, link_name, link_url, link_email, show_location, sort, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from friend_link
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from friend_link
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lei.entity.FriendLink" >
    insert into friend_link (id, link_name, link_url, 
      link_email, show_location, sort, 
      create_time)
    values (#{id,jdbcType=INTEGER}, #{linkName,jdbcType=VARCHAR}, #{linkUrl,jdbcType=VARCHAR}, 
      #{linkEmail,jdbcType=VARCHAR}, #{showLocation,jdbcType=VARCHAR}, #{sort,jdbcType=INTEGER}, 
      #{createTime,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.lei.entity.FriendLink" >
    insert into friend_link
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="linkName != null" >
        link_name,
      </if>
      <if test="linkUrl != null" >
        link_url,
      </if>
      <if test="linkEmail != null" >
        link_email,
      </if>
      <if test="showLocation != null" >
        show_location,
      </if>
      <if test="sort != null" >
        sort,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="linkName != null" >
        #{linkName,jdbcType=VARCHAR},
      </if>
      <if test="linkUrl != null" >
        #{linkUrl,jdbcType=VARCHAR},
      </if>
      <if test="linkEmail != null" >
        #{linkEmail,jdbcType=VARCHAR},
      </if>
      <if test="showLocation != null" >
        #{showLocation,jdbcType=VARCHAR},
      </if>
      <if test="sort != null" >
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lei.entity.FriendLink" >
    update friend_link
    <set >
      <if test="linkName != null" >
        link_name = #{linkName,jdbcType=VARCHAR},
      </if>
      <if test="linkUrl != null" >
        link_url = #{linkUrl,jdbcType=VARCHAR},
      </if>
      <if test="linkEmail != null" >
        link_email = #{linkEmail,jdbcType=VARCHAR},
      </if>
      <if test="showLocation != null" >
        show_location = #{showLocation,jdbcType=VARCHAR},
      </if>
      <if test="sort != null" >
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lei.entity.FriendLink" >
    update friend_link
    set link_name = #{linkName,jdbcType=VARCHAR},
      link_url = #{linkUrl,jdbcType=VARCHAR},
      link_email = #{linkEmail,jdbcType=VARCHAR},
      show_location = #{showLocation,jdbcType=VARCHAR},
      sort = #{sort,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>